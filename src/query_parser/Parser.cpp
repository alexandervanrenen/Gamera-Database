/* A recursive-descent parser generated by greg 0.4.3 */

#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-function"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <memory>
#include <vector>
#include <unordered_map>
#include <stack>
struct GREG;
#define YYRULECOUNT 52

#include "Parser.hpp"
#include "Statement.hpp"
#include "util/Utility.hpp"
#include "harriet/Utility.hpp"
#include "harriet/Expression.hpp"
#include "harriet/Value.hpp"
#include "harriet/VariableType.hpp"
#include "schema/Common.hpp"
#include <unistd.h>
#include <sstream>
#include <memory>
#include <iostream>
#include <mutex>

using namespace std;
using namespace dbi;
using namespace dbi::script;

struct ReturnValue {
   bool boolean;
   int number;
   float numberf;

   string str;
   vector<string> stringVec;

   ColumnReference columnReference;
   TableReference tableReference;
   AttributeDeclaration attributeDeclaration;

   vector<AttributeDeclaration> attributeDeclarationVec;
   vector<TableReference> tableReferenceVec;
   vector<ColumnReference> columnReferenceVec;

   unique_ptr<Statement> statement;
   vector<unique_ptr<Statement>> statements;

   unique_ptr<harriet::Value> value;
   vector<unique_ptr<harriet::Value>> valueVec;

   unique_ptr<harriet::Expression> expression;
   vector<unique_ptr<harriet::Expression>> expressionVec;
};

# define YYSTYPE struct ReturnValue

namespace {
unique_ptr<RootStatement> result;
istringstream input;
static int lineNumber= 0;
static int columnNumber= 0;
}

# define YY_INPUT(buf, result, max, D, G)                           \
   {                                                                \
      int c= input.get();                                           \
      columnNumber++;                                               \
      if ('\n' == c || '\r' == c) {++lineNumber; columnNumber=0;}   \
      result= (EOF == c) ? 0 : (*(buf)= c, 1);                      \
   };


#ifndef YY_ALLOC
#define YY_ALLOC(N, D) malloc(N)
#endif
#ifndef YY_CALLOC
#define YY_CALLOC(N, S, D) calloc(N, S)
#endif
#ifndef YY_REALLOC
#define YY_REALLOC(B, N, D) realloc(B, N)
#endif
#ifndef YY_FREE
#define YY_FREE free
#endif
#ifndef YY_LOCAL
#define YY_LOCAL(T)     static T
#endif
#ifndef YY_ACTION
#define YY_ACTION(T)    static T
#endif
#ifndef YY_RULE
#define YY_RULE(T)      static T
#endif
#ifndef YY_PARSE
#define YY_PARSE(T)     T
#endif
#ifndef YY_NAME
#define YY_NAME(N) yy##N
#endif
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size, D,G)            \
  {                                                     \
    int yyc= getchar();                                 \
    if ('\n' == yyc || '\r' == yyc) { ++G->line; G->col=0; } else ++G->col;	      \
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);        \
    yyprintf((stderr, "<%c>", yyc));                  \
  }
#endif
#ifndef YY_BEGIN
#define YY_BEGIN        ( G->begin= G->pos, 1)
#endif
#ifndef YY_END
#define YY_END          ( G->end= G->pos, 1)
#endif
#ifdef YY_DEBUG
# define yyprintf(args) fprintf args
#else
# define yyprintf(args)
#endif
#ifndef YYSTYPE
#define YYSTYPE int
#endif
#ifndef YY_XTYPE
#define YY_XTYPE void *
#endif
#ifndef YY_XVAR
#define YY_XVAR yyxvar
#endif

#ifndef YY_STACK_SIZE
#define YY_STACK_SIZE 128
#endif

#ifndef YY_BUFFER_START_SIZE
#define YY_BUFFER_START_SIZE 1024
#endif

#ifndef YY_AST_TYPE
#define YY_AST_TYPE
#endif

#ifndef YY_CTYPE_DEFINITION 
#define YY_CTYPE_DEFINITION() \
  struct Collection YY_AST_TYPE { \
    std::vector<YYSTYPE> items; \
    void push_back(YYSTYPE&& item) { items.push_back(std::move(item)); } \
    operator std::vector<YYSTYPE>&() { return items; } \
  };
#endif

YY_CTYPE_DEFINITION()

#ifndef YY_CTYPE
#define YY_CTYPE Collection
#endif

#ifndef YY_PART
#define yydata G->data
#define yy G->ss

struct _yythunk; // forward declaration
typedef void (*yyaction)(GREG *G, char *yytext, int yyleng, struct _yythunk *thunkpos, YY_XTYPE YY_XVAR);
typedef struct _yythunk { int begin, end;  int line,col; yyaction  action;  struct _yythunk *next; } yythunk;

struct GREG {
  char *buf;
  int buflen;
  int   offset;
  int   pos;
  int   limit;
  char *text;
  int   textlen;
  int   begin;
  int   end;
  yythunk *thunks;
  int   thunkslen;
  int thunkpos;
  YYSTYPE ss;
  YYSTYPE *val;
  YYSTYPE *vals;
  int valslen;
  YY_XTYPE data;
  int maxPos;
  int line;
  int col;
  std::stack<std::unordered_map<int,std::unique_ptr<YY_CTYPE>>> collectionStack;
  GREG() : buf(0),buflen(0),offset(0),pos(0),limit(0),text(0),textlen(0),begin(0),end(0),thunks(0),thunkslen(0),thunkpos(0),val(0),vals(0),valslen(0),data(0),maxPos(0),line(0),col(0) {}
};

YY_LOCAL(int) yyrefill(GREG *G)
{
  int yyn;
  while (G->buflen - G->pos < 512)
    {
      G->buflen *= 2;
      G->buf= (char*)YY_REALLOC(G->buf, G->buflen, G->data);
    }
  YY_INPUT((G->buf + G->pos), yyn, (G->buflen - G->pos), G->data,G);
  if (!yyn) return 0;
  G->limit += yyn;
  return 1;
}

YY_LOCAL(int) yymatchDot(GREG *G)
{
  if (G->pos >= G->limit && !yyrefill(G)) return 0;
  ++G->pos;
  return 1;
}

YY_LOCAL(int) yymatchChar(GREG *G, int c)
{
  if (G->pos >= G->limit && !yyrefill(G)) return 0;
  if ((unsigned char)G->buf[G->pos] == c)
    {
      ++G->pos;
      yyprintf((stderr, "  ok   yymatchChar(%c) @ %s\n", c, G->buf+G->pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchChar(%c) @ %s\n", c, G->buf+G->pos));
  return 0;
}

YY_LOCAL(int) yymatchString(GREG *G, const char *s)
{
  int yysav= G->pos;
  while (*s)
    {
      if (G->pos >= G->limit && !yyrefill(G)) return 0;
      if (G->buf[G->pos] != *s)
        {
          G->pos= yysav;
          return 0;
        }
      ++s;
      ++G->pos;
    }
  return 1;
}

YY_LOCAL(int) yymatchClass(GREG *G, unsigned char *bits)
{
  int c;
  if (G->pos >= G->limit && !yyrefill(G)) return 0;
  c= (unsigned char)G->buf[G->pos];
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++G->pos;
      yyprintf((stderr, "  ok   yymatchClass @ %s\n", G->buf+G->pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClass @ %s\n", G->buf+G->pos));
  return 0;
}

YY_LOCAL(void) yyDo(GREG *G, yyaction action, int begin, int end)
{
  while (G->thunkpos >= G->thunkslen)
    {
      G->thunkslen *= 2;
      G->thunks= (yythunk*)YY_REALLOC(G->thunks, sizeof(yythunk) * G->thunkslen, G->data);
    }
  G->thunks[G->thunkpos].begin=  begin;
  G->thunks[G->thunkpos].end=    end;
  G->thunks[G->thunkpos].line=   G->line;
  G->thunks[G->thunkpos].col=    G->col;
  G->thunks[G->thunkpos].action= action;
  ++G->thunkpos;
}

YY_LOCAL(int) yyText(GREG *G, int begin, int end)
{
  int yyleng= end - begin;
  if (yyleng <= 0)
    yyleng= 0;
  else
    {
      while (G->textlen < (yyleng + 1))
        {
          G->textlen *= 2;
          G->text= (char*)YY_REALLOC(G->text, G->textlen, G->data);
        }
      memcpy(G->text, G->buf + begin, yyleng);
    }
  G->text[yyleng]= '\0';
  return yyleng;
}

YY_LOCAL(void) yyDone(GREG *G)
{
  int pos;
  for (pos= 0; pos < G->thunkpos; ++pos)
    {
      yythunk *thunk= &G->thunks[pos];
      int yyleng= thunk->end ? yyText(G, thunk->begin, thunk->end) : thunk->begin;
      yyprintf((stderr, "DO [%d] %p %s\n", pos, thunk->action, G->text));
      thunk->action(G, G->text, yyleng, thunk, G->data);
    }
  G->thunkpos= 0;
}

YY_LOCAL(void) yyCommit(GREG *G)
{
  if ((G->limit -= G->pos))
    {
      memmove(G->buf, G->buf + G->pos, G->limit);
    }
  G->offset += G->pos;
  G->begin -= G->pos;
  G->end -= G->pos;
  G->pos= G->thunkpos= 0;
}

YY_LOCAL(int) yyAccept(GREG *G, int tp0)
{
  if (tp0)
    {
      fprintf(stderr, "accept denied at %d\n", tp0);
      return 0;
    }
  else
    {
      yyDone(G);
      yyCommit(G);
    }
  return 1;
}

YY_LOCAL(void) yyPush(GREG *G, char *text, int count, yythunk *thunk, YY_XTYPE YY_XVAR) { while(count--) { new (&G->val[0]) YYSTYPE(); G->val++; } }
YY_LOCAL(void) yyPop(GREG *G, char *text, int count, yythunk *thunk, YY_XTYPE YY_XVAR)  { G->val -= count; }
YY_LOCAL(void) yySet(GREG *G, char *text, int count, yythunk *thunk, YY_XTYPE YY_XVAR)  { G->val[count]= std::move(G->ss); }
YY_LOCAL(void) yyResetSS(GREG *G, char *text, int count, yythunk *thunk, YY_XTYPE YY_XVAR)  { new (&G->ss) YYSTYPE(); }


#endif /* YY_PART */

#define YYACCEPT        yyAccept(G, yythunkpos0)

YY_RULE(int) yy_KEYWORDS(GREG *G); /* 52 */
YY_RULE(int) yy_STRING(GREG *G); /* 51 */
YY_RULE(int) yy_FLOAT(GREG *G); /* 50 */
YY_RULE(int) yy_INTEGER(GREG *G); /* 49 */
YY_RULE(int) yy_CHARACTER_ID(GREG *G); /* 48 */
YY_RULE(int) yy_FLOAT_ID(GREG *G); /* 47 */
YY_RULE(int) yy_INTEGER_ID(GREG *G); /* 46 */
YY_RULE(int) yy_DIVIDE(GREG *G); /* 45 */
YY_RULE(int) yy_TIMES(GREG *G); /* 44 */
YY_RULE(int) yy_Factor(GREG *G); /* 43 */
YY_RULE(int) yy_MINUS(GREG *G); /* 42 */
YY_RULE(int) yy_PLUS(GREG *G); /* 41 */
YY_RULE(int) yy_Product(GREG *G); /* 40 */
YY_RULE(int) yy_EQ(GREG *G); /* 39 */
YY_RULE(int) yy_FALSE(GREG *G); /* 38 */
YY_RULE(int) yy_TRUE(GREG *G); /* 37 */
YY_RULE(int) yy_Sum(GREG *G); /* 36 */
YY_RULE(int) yy_Expression(GREG *G); /* 35 */
YY_RULE(int) yy_VALUE(GREG *G); /* 34 */
YY_RULE(int) yy_Values(GREG *G); /* 33 */
YY_RULE(int) yy_VALUES(GREG *G); /* 32 */
YY_RULE(int) yy_INTO(GREG *G); /* 31 */
YY_RULE(int) yy_INSERT(GREG *G); /* 30 */
YY_RULE(int) yy_NULLABLE(GREG *G); /* 29 */
YY_RULE(int) yy_TYPE(GREG *G); /* 28 */
YY_RULE(int) yy_CLOSE(GREG *G); /* 27 */
YY_RULE(int) yy_Attribute(GREG *G); /* 26 */
YY_RULE(int) yy_OPEN(GREG *G); /* 25 */
YY_RULE(int) yy_Layout(GREG *G); /* 24 */
YY_RULE(int) yy_TABLE(GREG *G); /* 23 */
YY_RULE(int) yy_CREATE(GREG *G); /* 22 */
YY_RULE(int) yy_Bool(GREG *G); /* 21 */
YY_RULE(int) yy_AND(GREG *G); /* 20 */
YY_RULE(int) yy_Predicate(GREG *G); /* 19 */
YY_RULE(int) yy_TableName(GREG *G); /* 18 */
YY_RULE(int) yy_POINT(GREG *G); /* 17 */
YY_RULE(int) yy_ID(GREG *G); /* 16 */
YY_RULE(int) yy_COMMA(GREG *G); /* 15 */
YY_RULE(int) yy_ColumnReference(GREG *G); /* 14 */
YY_RULE(int) yy_SEM(GREG *G); /* 13 */
YY_RULE(int) yy_Predicates(GREG *G); /* 12 */
YY_RULE(int) yy_WHERE(GREG *G); /* 11 */
YY_RULE(int) yy_Tables(GREG *G); /* 10 */
YY_RULE(int) yy_FROM(GREG *G); /* 9 */
YY_RULE(int) yy_Projection(GREG *G); /* 8 */
YY_RULE(int) yy_SELECT(GREG *G); /* 7 */
YY_RULE(int) yy_InsertStatement(GREG *G); /* 6 */
YY_RULE(int) yy_CreateTableStatement(GREG *G); /* 5 */
YY_RULE(int) yy_SelectStatement(GREG *G); /* 4 */
YY_RULE(int) yy_GlobalSingle(GREG *G); /* 3 */
YY_RULE(int) yy__(GREG *G); /* 2 */
YY_RULE(int) yy_start(GREG *G); /* 1 */

YY_ACTION(void) yy_1_CHARACTER_ID(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_CHARACTER_ID\n"));
   ;
}
YY_ACTION(void) yy_1_FLOAT_ID(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_FLOAT_ID\n"));
   ;
}
YY_ACTION(void) yy_1_INTEGER_ID(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_INTEGER_ID\n"));
   ;
}
YY_ACTION(void) yy_1_AND(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_AND\n"));
   ;
}
YY_ACTION(void) yy_1_FALSE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_FALSE\n"));
   ;
}
YY_ACTION(void) yy_1_TRUE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_TRUE\n"));
   ;
}
YY_ACTION(void) yy_1_WHERE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_WHERE\n"));
   ;
}
YY_ACTION(void) yy_1_VALUES(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_VALUES\n"));
   ;
}
YY_ACTION(void) yy_1_INTO(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_INTO\n"));
   ;
}
YY_ACTION(void) yy_1_INSERT(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_INSERT\n"));
   ;
}
YY_ACTION(void) yy_1_TABLE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_TABLE\n"));
   ;
}
YY_ACTION(void) yy_1_CREATE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_CREATE\n"));
   ;
}
YY_ACTION(void) yy_1_FROM(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_FROM\n"));
   ;
}
YY_ACTION(void) yy_1_SELECT(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_SELECT\n"));
   ;
}
YY_ACTION(void) yy_1_KEYWORDS(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_KEYWORDS\n"));
   ;
}
YY_ACTION(void) yy_1_EQ(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_EQ\n"));
   ;
}
YY_ACTION(void) yy_1_DIVIDE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_DIVIDE\n"));
   ;
}
YY_ACTION(void) yy_1_TIMES(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_TIMES\n"));
   ;
}
YY_ACTION(void) yy_1_MINUS(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_MINUS\n"));
   ;
}
YY_ACTION(void) yy_1_PLUS(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_PLUS\n"));
   ;
}
YY_ACTION(void) yy_1_CLOSE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_CLOSE\n"));
   ;
}
YY_ACTION(void) yy_1_OPEN(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_OPEN\n"));
   ;
}
YY_ACTION(void) yy_1_SEM(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_SEM\n"));
   ;
}
YY_ACTION(void) yy_1_POINT(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_POINT\n"));
   ;
}
YY_ACTION(void) yy_1_COMMA(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_COMMA\n"));
   ;
}
YY_ACTION(void) yy_1__(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1__\n"));
   ;
}
YY_ACTION(void) yy_1_STRING(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_STRING\n"));
   yy.str = string(yytext); ;
}
YY_ACTION(void) yy_1_FLOAT(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_FLOAT\n"));
   yy.numberf = harriet::to_number<float>(yytext); ;
}
YY_ACTION(void) yy_1_INTEGER(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_INTEGER\n"));
   yy.number = harriet::to_number<int32_t>(yytext); ;
}
YY_ACTION(void) yy_1_ID(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_ID\n"));
   yy.str = string(yytext); ;
}
YY_ACTION(void) yy_3_NULLABLE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_3_NULLABLE\n"));
   yy.boolean = true; ;
}
YY_ACTION(void) yy_2_NULLABLE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_2_NULLABLE\n"));
   yy.boolean = true; ;
}
YY_ACTION(void) yy_1_NULLABLE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
  yyprintf((stderr, "do yy_1_NULLABLE\n"));
   yy.boolean = false; ;
}
YY_ACTION(void) yy_3_VALUE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define v G->val[-1]
  yyprintf((stderr, "do yy_3_VALUE\n"));
   yy.value = util::make_unique<harriet::Value>(v.str, v.str.size()); ;
#undef v
}
YY_ACTION(void) yy_2_VALUE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define v G->val[-1]
  yyprintf((stderr, "do yy_2_VALUE\n"));
   yy.value = util::make_unique<harriet::Value>(v.numberf); ;
#undef v
}
YY_ACTION(void) yy_1_VALUE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define v G->val[-1]
  yyprintf((stderr, "do yy_1_VALUE\n"));
   yy.value = util::make_unique<harriet::Value>(v.number); ;
#undef v
}
YY_ACTION(void) yy_4_TYPE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
  yyprintf((stderr, "do yy_4_TYPE\n"));
   yy.str = string("character"); yy.number = 1; ;
#undef i
}
YY_ACTION(void) yy_3_TYPE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
  yyprintf((stderr, "do yy_3_TYPE\n"));
   yy.str = string("character"); yy.number = i.number; ;
#undef i
}
YY_ACTION(void) yy_2_TYPE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
  yyprintf((stderr, "do yy_2_TYPE\n"));
   yy.str = string("float"); yy.number = 4; ;
#undef i
}
YY_ACTION(void) yy_1_TYPE(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
  yyprintf((stderr, "do yy_1_TYPE\n"));
   yy.str = string("integer"); yy.number = 4; ;
#undef i
}
YY_ACTION(void) yy_3_Factor(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define c G->val[-1]
#define v G->val[-2]
#define e G->val[-3]
  yyprintf((stderr, "do yy_3_Factor\n"));
   yy.expression = util::make_unique<harriet::Variable>(c.columnReference.tableQualifier + "." + c.columnReference.columnName); ;
#undef c
#undef v
#undef e
}
YY_ACTION(void) yy_2_Factor(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define c G->val[-1]
#define v G->val[-2]
#define e G->val[-3]
  yyprintf((stderr, "do yy_2_Factor\n"));
   yy.expression = move(v.value); ;
#undef c
#undef v
#undef e
}
YY_ACTION(void) yy_1_Factor(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define c G->val[-1]
#define v G->val[-2]
#define e G->val[-3]
  yyprintf((stderr, "do yy_1_Factor\n"));
   yy.expression = move(e.expression); ;
#undef c
#undef v
#undef e
}
YY_ACTION(void) yy_4_Product(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define v G->val[-2]
  yyprintf((stderr, "do yy_4_Product\n"));
   yy.expression = move(v.expression); ;
#undef i
#undef v
}
YY_ACTION(void) yy_3_Product(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define v G->val[-2]
  yyprintf((stderr, "do yy_3_Product\n"));
   v.expression = util::make_unique<harriet::DivisionOperator>(move(v.expression), move(i.expression)); ;
#undef i
#undef v
}
YY_ACTION(void) yy_2_Product(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define v G->val[-2]
  yyprintf((stderr, "do yy_2_Product\n"));
   v.expression = util::make_unique<harriet::MultiplicationOperator>(move(v.expression), move(i.expression)); ;
#undef i
#undef v
}
YY_ACTION(void) yy_1_Product(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define v G->val[-2]
  yyprintf((stderr, "do yy_1_Product\n"));
   ;
#undef i
#undef v
}
YY_ACTION(void) yy_4_Sum(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define p G->val[-2]
  yyprintf((stderr, "do yy_4_Sum\n"));
   yy.expression = move(p.expression); ;
#undef i
#undef p
}
YY_ACTION(void) yy_3_Sum(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define p G->val[-2]
  yyprintf((stderr, "do yy_3_Sum\n"));
   p.expression = util::make_unique<harriet::MinusOperator>(move(p.expression), move(i.expression)); ;
#undef i
#undef p
}
YY_ACTION(void) yy_2_Sum(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define p G->val[-2]
  yyprintf((stderr, "do yy_2_Sum\n"));
   p.expression = util::make_unique<harriet::PlusOperator>(move(p.expression), move(i.expression)); ;
#undef i
#undef p
}
YY_ACTION(void) yy_1_Sum(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define p G->val[-2]
  yyprintf((stderr, "do yy_1_Sum\n"));
   ;
#undef i
#undef p
}
YY_ACTION(void) yy_5_Bool(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define b G->val[-2]
#define f G->val[-3]
#define t G->val[-4]
  yyprintf((stderr, "do yy_5_Bool\n"));
   yy.expression = move(b.expression); ;
#undef i
#undef b
#undef f
#undef t
}
YY_ACTION(void) yy_4_Bool(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define b G->val[-2]
#define f G->val[-3]
#define t G->val[-4]
  yyprintf((stderr, "do yy_4_Bool\n"));
   b.expression = util::make_unique<harriet::EqualOperator>(move(b.expression), move(i.expression)); ;
#undef i
#undef b
#undef f
#undef t
}
YY_ACTION(void) yy_3_Bool(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define b G->val[-2]
#define f G->val[-3]
#define t G->val[-4]
  yyprintf((stderr, "do yy_3_Bool\n"));
   ;
#undef i
#undef b
#undef f
#undef t
}
YY_ACTION(void) yy_2_Bool(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define b G->val[-2]
#define f G->val[-3]
#define t G->val[-4]
  yyprintf((stderr, "do yy_2_Bool\n"));
   yy.expression = move(f.value); ;
#undef i
#undef b
#undef f
#undef t
}
YY_ACTION(void) yy_1_Bool(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define b G->val[-2]
#define f G->val[-3]
#define t G->val[-4]
  yyprintf((stderr, "do yy_1_Bool\n"));
   yy.expression = move(t.value); ;
#undef i
#undef b
#undef f
#undef t
}
YY_ACTION(void) yy_2_Expression(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define s G->val[-1]
#define b G->val[-2]
  yyprintf((stderr, "do yy_2_Expression\n"));
   yy.expression = move(s.expression); ;
#undef s
#undef b
}
YY_ACTION(void) yy_1_Expression(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define s G->val[-1]
#define b G->val[-2]
  yyprintf((stderr, "do yy_1_Expression\n"));
   yy.expression = move(b.expression); ;
#undef s
#undef b
}
YY_ACTION(void) yy_3_Values(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define a G->val[-2]
  yyprintf((stderr, "do yy_3_Values\n"));
   yy = move(a); ;
#undef i
#undef a
}
YY_ACTION(void) yy_2_Values(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define a G->val[-2]
  yyprintf((stderr, "do yy_2_Values\n"));
   a.valueVec.push_back(move(i.value)); ;
#undef i
#undef a
}
YY_ACTION(void) yy_1_Values(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define a G->val[-2]
  yyprintf((stderr, "do yy_1_Values\n"));
   a.valueVec.push_back(move(a.value)); ;
#undef i
#undef a
}
YY_ACTION(void) yy_1_InsertStatement(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define v G->val[-1]
#define id G->val[-2]
  yyprintf((stderr, "do yy_1_InsertStatement\n"));
   yy.statement = util::make_unique<InsertStatement>(id.str, move(v.valueVec)); ;
#undef v
#undef id
}
YY_ACTION(void) yy_1_Attribute(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define n G->val[-1]
#define t G->val[-2]
#define id G->val[-3]
  yyprintf((stderr, "do yy_1_Attribute\n"));
   yy.attributeDeclaration = AttributeDeclaration{id.str, harriet::VariableType(t.str, t.number), n.boolean}; ;
#undef n
#undef t
#undef id
}
YY_ACTION(void) yy_3_Layout(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define a G->val[-2]
  yyprintf((stderr, "do yy_3_Layout\n"));
   yy = move(a); ;
#undef i
#undef a
}
YY_ACTION(void) yy_2_Layout(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define a G->val[-2]
  yyprintf((stderr, "do yy_2_Layout\n"));
   a.attributeDeclarationVec.push_back(i.attributeDeclaration); ;
#undef i
#undef a
}
YY_ACTION(void) yy_1_Layout(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define a G->val[-2]
  yyprintf((stderr, "do yy_1_Layout\n"));
   a.attributeDeclarationVec.push_back(a.attributeDeclaration); ;
#undef i
#undef a
}
YY_ACTION(void) yy_1_CreateTableStatement(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define l G->val[-1]
#define id G->val[-2]
  yyprintf((stderr, "do yy_1_CreateTableStatement\n"));
   yy.statement = util::make_unique<CreateTableStatement>(id.str, move(l.attributeDeclarationVec)); ;
#undef l
#undef id
}
YY_ACTION(void) yy_1_Predicate(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define b G->val[-1]
  yyprintf((stderr, "do yy_1_Predicate\n"));
   yy.expression = move(b.expression); ;
#undef b
}
YY_ACTION(void) yy_3_Predicates(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define p G->val[-2]
  yyprintf((stderr, "do yy_3_Predicates\n"));
   yy.expressionVec = move(p.expressionVec); ;
#undef i
#undef p
}
YY_ACTION(void) yy_2_Predicates(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define p G->val[-2]
  yyprintf((stderr, "do yy_2_Predicates\n"));
   p.expressionVec.push_back(move(i.expression)); ;
#undef i
#undef p
}
YY_ACTION(void) yy_1_Predicates(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define p G->val[-2]
  yyprintf((stderr, "do yy_1_Predicates\n"));
   p.expressionVec.push_back(move(p.expression)); ;
#undef i
#undef p
}
YY_ACTION(void) yy_2_TableName(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define alias G->val[-1]
#define tid G->val[-2]
  yyprintf((stderr, "do yy_2_TableName\n"));
   yy.tableReference = TableReference{tid.str, ""}; ;
#undef alias
#undef tid
}
YY_ACTION(void) yy_1_TableName(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define alias G->val[-1]
#define tid G->val[-2]
  yyprintf((stderr, "do yy_1_TableName\n"));
   yy.tableReference = TableReference{tid.str, alias.str}; ;
#undef alias
#undef tid
}
YY_ACTION(void) yy_3_Tables(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define t G->val[-2]
  yyprintf((stderr, "do yy_3_Tables\n"));
   yy = move(t);;
#undef i
#undef t
}
YY_ACTION(void) yy_2_Tables(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define t G->val[-2]
  yyprintf((stderr, "do yy_2_Tables\n"));
   t.tableReferenceVec.push_back(i.tableReference); ;
#undef i
#undef t
}
YY_ACTION(void) yy_1_Tables(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define t G->val[-2]
  yyprintf((stderr, "do yy_1_Tables\n"));
   t.tableReferenceVec.push_back(t.tableReference); ;
#undef i
#undef t
}
YY_ACTION(void) yy_2_ColumnReference(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define cid G->val[-1]
#define tid G->val[-2]
  yyprintf((stderr, "do yy_2_ColumnReference\n"));
   yy.columnReference = ColumnReference{"", cid.str}; ;
#undef cid
#undef tid
}
YY_ACTION(void) yy_1_ColumnReference(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define cid G->val[-1]
#define tid G->val[-2]
  yyprintf((stderr, "do yy_1_ColumnReference\n"));
   yy.columnReference = ColumnReference{tid.str, cid.str}; ;
#undef cid
#undef tid
}
YY_ACTION(void) yy_3_Projection(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define s G->val[-2]
  yyprintf((stderr, "do yy_3_Projection\n"));
   yy = move(s); ;
#undef i
#undef s
}
YY_ACTION(void) yy_2_Projection(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define s G->val[-2]
  yyprintf((stderr, "do yy_2_Projection\n"));
   s.columnReferenceVec.push_back(i.columnReference); ;
#undef i
#undef s
}
YY_ACTION(void) yy_1_Projection(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define s G->val[-2]
  yyprintf((stderr, "do yy_1_Projection\n"));
   s.columnReferenceVec.push_back(s.columnReference); ;
#undef i
#undef s
}
YY_ACTION(void) yy_2_SelectStatement(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define c G->val[-1]
#define t G->val[-2]
#define p G->val[-3]
  yyprintf((stderr, "do yy_2_SelectStatement\n"));
   yy.statement = util::make_unique<SelectStatement>(move(p.columnReferenceVec), move(t.tableReferenceVec), vector<unique_ptr<harriet::Expression>>()); ;
#undef c
#undef t
#undef p
}
YY_ACTION(void) yy_1_SelectStatement(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define c G->val[-1]
#define t G->val[-2]
#define p G->val[-3]
  yyprintf((stderr, "do yy_1_SelectStatement\n"));
   yy.statement = util::make_unique<SelectStatement>(move(p.columnReferenceVec), move(t.tableReferenceVec), move(c.expressionVec)); ;
#undef c
#undef t
#undef p
}
YY_ACTION(void) yy_3_GlobalSingle(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define c G->val[-2]
#define s G->val[-3]
  yyprintf((stderr, "do yy_3_GlobalSingle\n"));
   yy = move(i); ;
#undef i
#undef c
#undef s
}
YY_ACTION(void) yy_2_GlobalSingle(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define c G->val[-2]
#define s G->val[-3]
  yyprintf((stderr, "do yy_2_GlobalSingle\n"));
   yy = move(c); ;
#undef i
#undef c
#undef s
}
YY_ACTION(void) yy_1_GlobalSingle(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define i G->val[-1]
#define c G->val[-2]
#define s G->val[-3]
  yyprintf((stderr, "do yy_1_GlobalSingle\n"));
   yy = move(s); ;
#undef i
#undef c
#undef s
}
YY_ACTION(void) yy_4_start(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define s G->val[-1]
#define a G->val[-2]
  yyprintf((stderr, "do yy_4_start\n"));
   throw 2; ;
#undef s
#undef a
}
YY_ACTION(void) yy_3_start(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define s G->val[-1]
#define a G->val[-2]
  yyprintf((stderr, "do yy_3_start\n"));
   result = util::make_unique<RootStatement>(move(a.statements)); ;
#undef s
#undef a
}
YY_ACTION(void) yy_2_start(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define s G->val[-1]
#define a G->val[-2]
  yyprintf((stderr, "do yy_2_start\n"));
   a.statements.push_back(move(s.statement)); ;
#undef s
#undef a
}
YY_ACTION(void) yy_1_start(GREG *G, char *yytext, int yyleng, yythunk *thunk, YY_XTYPE YY_XVAR)
{
#define s G->val[-1]
#define a G->val[-2]
  yyprintf((stderr, "do yy_1_start\n"));
   a.statements.push_back(move(a.statement)); ;
#undef s
#undef a
}

YY_RULE(int) yy_KEYWORDS(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "KEYWORDS"));
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos2= G->pos, yythunkpos2= G->thunkpos; if (!yy_SELECT(G)) { goto l3; }  goto l2;
  l3:;	  G->pos= yypos2; G->thunkpos= yythunkpos2; if (!yy_FROM(G)) { goto l4; }  goto l2;
  l4:;	  G->pos= yypos2; G->thunkpos= yythunkpos2; if (!yy_CREATE(G)) { goto l5; }  goto l2;
  l5:;	  G->pos= yypos2; G->thunkpos= yythunkpos2; if (!yy_TABLE(G)) { goto l6; }  goto l2;
  l6:;	  G->pos= yypos2; G->thunkpos= yythunkpos2; if (!yy_INSERT(G)) { goto l7; }  goto l2;
  l7:;	  G->pos= yypos2; G->thunkpos= yythunkpos2; if (!yy_INTO(G)) { goto l8; }  goto l2;
  l8:;	  G->pos= yypos2; G->thunkpos= yythunkpos2; if (!yy_VALUES(G)) { goto l9; }  goto l2;
  l9:;	  G->pos= yypos2; G->thunkpos= yythunkpos2; if (!yy_WHERE(G)) { goto l10; }  goto l2;
  l10:;	  G->pos= yypos2; G->thunkpos= yythunkpos2; if (!yy_TYPE(G)) { goto l1; }  yyDo(G, yy_1_KEYWORDS, G->begin, G->end);
  }
  l2:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "KEYWORDS", G->buf+G->pos));
  return 1;
  l1:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "KEYWORDS", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_STRING(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "STRING"));  if (!yymatchChar(G, '\'')) goto l11;  yyText(G, G->begin, G->end);  if (!(YY_BEGIN)) goto l11;
  l12:;	
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos13= G->pos, yythunkpos13= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\001\000\377\003\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l13;  goto l12;
  l13:;	  G->pos= yypos13; G->thunkpos= yythunkpos13;
  }  yyText(G, G->begin, G->end);  if (!(YY_END)) goto l11;  if (!yymatchChar(G, '\'')) goto l11;  yyDo(G, yy_1_STRING, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "STRING", G->buf+G->pos));
  return 1;
  l11:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "STRING", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_FLOAT(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "FLOAT"));  yyText(G, G->begin, G->end);  if (!(YY_BEGIN)) goto l14;
  l15:;	
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos16= G->pos, yythunkpos16= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l16;  goto l15;
  l16:;	  G->pos= yypos16; G->thunkpos= yythunkpos16;
  }  if (!yymatchChar(G, '.')) goto l14;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l14;
  l17:;	
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos18= G->pos, yythunkpos18= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l18;  goto l17;
  l18:;	  G->pos= yypos18; G->thunkpos= yythunkpos18;
  }  yyText(G, G->begin, G->end);  if (!(YY_END)) goto l14;  yyDo(G, yy_1_FLOAT, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "FLOAT", G->buf+G->pos));
  return 1;
  l14:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FLOAT", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_INTEGER(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "INTEGER"));  yyText(G, G->begin, G->end);  if (!(YY_BEGIN)) goto l19;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l19;
  l20:;	
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos21= G->pos, yythunkpos21= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l21;  goto l20;
  l21:;	  G->pos= yypos21; G->thunkpos= yythunkpos21;
  }  yyText(G, G->begin, G->end);  if (!(YY_END)) goto l19;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos22= G->pos, yythunkpos22= G->thunkpos;  if (!yymatchChar(G, '.')) goto l22;  goto l19;
  l22:;	  G->pos= yypos22; G->thunkpos= yythunkpos22;
  }  yyDo(G, yy_1_INTEGER, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "INTEGER", G->buf+G->pos));
  return 1;
  l19:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "INTEGER", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_CHARACTER_ID(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "CHARACTER_ID"));
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos24= G->pos, yythunkpos24= G->thunkpos;  if (!yymatchString(G, "character")) goto l25;  goto l24;
  l25:;	  G->pos= yypos24; G->thunkpos= yythunkpos24;  if (!yymatchString(G, "char")) goto l23;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos26= G->pos, yythunkpos26= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l26;  goto l23;
  l26:;	  G->pos= yypos26; G->thunkpos= yythunkpos26;
  }  yyDo(G, yy_1_CHARACTER_ID, G->begin, G->end);
  }
  l24:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "CHARACTER_ID", G->buf+G->pos));
  return 1;
  l23:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CHARACTER_ID", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_FLOAT_ID(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "FLOAT_ID"));  if (!yymatchString(G, "float")) goto l27;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos28= G->pos, yythunkpos28= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l28;  goto l27;
  l28:;	  G->pos= yypos28; G->thunkpos= yythunkpos28;
  }  yyDo(G, yy_1_FLOAT_ID, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "FLOAT_ID", G->buf+G->pos));
  return 1;
  l27:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FLOAT_ID", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_INTEGER_ID(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "INTEGER_ID"));  if (!yymatchString(G, "integer")) goto l29;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos30= G->pos, yythunkpos30= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l30;  goto l29;
  l30:;	  G->pos= yypos30; G->thunkpos= yythunkpos30;
  }  yyDo(G, yy_1_INTEGER_ID, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "INTEGER_ID", G->buf+G->pos));
  return 1;
  l29:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "INTEGER_ID", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_DIVIDE(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "DIVIDE"));  if (!yymatchChar(G, '/')) goto l31;  yyDo(G, yy_1_DIVIDE, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "DIVIDE", G->buf+G->pos));
  return 1;
  l31:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "DIVIDE", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_TIMES(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "TIMES"));  if (!yymatchChar(G, '*')) goto l32;  yyDo(G, yy_1_TIMES, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "TIMES", G->buf+G->pos));
  return 1;
  l32:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TIMES", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Factor(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Factor"));
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos34= G->pos, yythunkpos34= G->thunkpos; if (!yy_OPEN(G)) { goto l35; } if (!yy__(G)) { goto l35; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -3, 0); if (!yy_Expression(G)) { goto l35; }  yyDo(G, yySet, -3, 0); if (!yy__(G)) { goto l35; } if (!yy_CLOSE(G)) { goto l35; }  yyDo(G, yy_1_Factor, G->begin, G->end);  goto l34;
  l35:;	  G->pos= yypos34; G->thunkpos= yythunkpos34; yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_VALUE(G)) { goto l36; }  yyDo(G, yySet, -2, 0);  yyDo(G, yy_2_Factor, G->begin, G->end);  goto l34;
  l36:;	  G->pos= yypos34; G->thunkpos= yythunkpos34; yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_ColumnReference(G)) { goto l33; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_3_Factor, G->begin, G->end);
  }
  l34:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Factor", G->buf+G->pos));  yyDo(G, yyPop, 3, 0);
  return 1;
  l33:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Factor", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_MINUS(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "MINUS"));  if (!yymatchChar(G, '-')) goto l37;  yyDo(G, yy_1_MINUS, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "MINUS", G->buf+G->pos));
  return 1;
  l37:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "MINUS", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_PLUS(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "PLUS"));  if (!yymatchChar(G, '+')) goto l38;  yyDo(G, yy_1_PLUS, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "PLUS", G->buf+G->pos));
  return 1;
  l38:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "PLUS", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Product(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Product")); yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_Factor(G)) { goto l39; }  yyDo(G, yySet, -2, 0);  yyDo(G, yy_1_Product, G->begin, G->end);
  l40:;	
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos41= G->pos, yythunkpos41= G->thunkpos;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos42= G->pos, yythunkpos42= G->thunkpos; if (!yy__(G)) { goto l43; } if (!yy_TIMES(G)) { goto l43; } if (!yy__(G)) { goto l43; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_Product(G)) { goto l43; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_2_Product, G->begin, G->end);  goto l42;
  l43:;	  G->pos= yypos42; G->thunkpos= yythunkpos42; if (!yy__(G)) { goto l41; } if (!yy_DIVIDE(G)) { goto l41; } if (!yy__(G)) { goto l41; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_Product(G)) { goto l41; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_3_Product, G->begin, G->end);
  }
  l42:;	  goto l40;
  l41:;	  G->pos= yypos41; G->thunkpos= yythunkpos41;
  }  yyDo(G, yy_4_Product, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Product", G->buf+G->pos));  yyDo(G, yyPop, 2, 0);
  return 1;
  l39:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Product", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_EQ(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "EQ"));
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos45= G->pos, yythunkpos45= G->thunkpos;  if (!yymatchChar(G, '=')) goto l46;  goto l45;
  l46:;	  G->pos= yypos45; G->thunkpos= yythunkpos45;  if (!yymatchString(G, "==")) goto l44;  yyDo(G, yy_1_EQ, G->begin, G->end);
  }
  l45:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "EQ", G->buf+G->pos));
  return 1;
  l44:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EQ", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_FALSE(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "FALSE"));  if (!yymatchString(G, "false")) goto l47;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos48= G->pos, yythunkpos48= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l48;  goto l47;
  l48:;	  G->pos= yypos48; G->thunkpos= yythunkpos48;
  }  yyDo(G, yy_1_FALSE, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "FALSE", G->buf+G->pos));
  return 1;
  l47:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FALSE", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_TRUE(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "TRUE"));  if (!yymatchString(G, "true")) goto l49;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos50= G->pos, yythunkpos50= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l50;  goto l49;
  l50:;	  G->pos= yypos50; G->thunkpos= yythunkpos50;
  }  yyDo(G, yy_1_TRUE, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "TRUE", G->buf+G->pos));
  return 1;
  l49:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TRUE", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Sum(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Sum")); yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_Product(G)) { goto l51; }  yyDo(G, yySet, -2, 0);  yyDo(G, yy_1_Sum, G->begin, G->end);
  l52:;	
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos53= G->pos, yythunkpos53= G->thunkpos;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos54= G->pos, yythunkpos54= G->thunkpos; if (!yy__(G)) { goto l55; } if (!yy_PLUS(G)) { goto l55; } if (!yy__(G)) { goto l55; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_Product(G)) { goto l55; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_2_Sum, G->begin, G->end);  goto l54;
  l55:;	  G->pos= yypos54; G->thunkpos= yythunkpos54; if (!yy__(G)) { goto l53; } if (!yy_MINUS(G)) { goto l53; } if (!yy__(G)) { goto l53; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_Product(G)) { goto l53; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_3_Sum, G->begin, G->end);
  }
  l54:;	  goto l52;
  l53:;	  G->pos= yypos53; G->thunkpos= yythunkpos53;
  }  yyDo(G, yy_4_Sum, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Sum", G->buf+G->pos));  yyDo(G, yyPop, 2, 0);
  return 1;
  l51:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Sum", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Expression(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Expression"));
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos57= G->pos, yythunkpos57= G->thunkpos; yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_Bool(G)) { goto l58; }  yyDo(G, yySet, -2, 0);  yyDo(G, yy_1_Expression, G->begin, G->end);  goto l57;
  l58:;	  G->pos= yypos57; G->thunkpos= yythunkpos57; yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_Sum(G)) { goto l56; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_2_Expression, G->begin, G->end);
  }
  l57:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Expression", G->buf+G->pos));  yyDo(G, yyPop, 2, 0);
  return 1;
  l56:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Expression", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_VALUE(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "VALUE"));
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos60= G->pos, yythunkpos60= G->thunkpos; yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_INTEGER(G)) { goto l61; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_1_VALUE, G->begin, G->end);  goto l60;
  l61:;	  G->pos= yypos60; G->thunkpos= yythunkpos60; yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_FLOAT(G)) { goto l62; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_2_VALUE, G->begin, G->end);  goto l60;
  l62:;	  G->pos= yypos60; G->thunkpos= yythunkpos60; yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_STRING(G)) { goto l59; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_3_VALUE, G->begin, G->end);
  }
  l60:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "VALUE", G->buf+G->pos));  yyDo(G, yyPop, 1, 0);
  return 1;
  l59:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "VALUE", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Values(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Values")); if (!yy_OPEN(G)) { goto l63; } if (!yy__(G)) { goto l63; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_VALUE(G)) { goto l63; }  yyDo(G, yySet, -2, 0);  yyDo(G, yy_1_Values, G->begin, G->end);
  l64:;	
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos65= G->pos, yythunkpos65= G->thunkpos; if (!yy__(G)) { goto l65; } if (!yy_COMMA(G)) { goto l65; } if (!yy__(G)) { goto l65; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_VALUE(G)) { goto l65; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_2_Values, G->begin, G->end);  goto l64;
  l65:;	  G->pos= yypos65; G->thunkpos= yythunkpos65;
  } if (!yy_CLOSE(G)) { goto l63; }  yyDo(G, yy_3_Values, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Values", G->buf+G->pos));  yyDo(G, yyPop, 2, 0);
  return 1;
  l63:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Values", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_VALUES(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "VALUES"));  if (!yymatchString(G, "values")) goto l66;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos67= G->pos, yythunkpos67= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l67;  goto l66;
  l67:;	  G->pos= yypos67; G->thunkpos= yythunkpos67;
  }  yyDo(G, yy_1_VALUES, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "VALUES", G->buf+G->pos));
  return 1;
  l66:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "VALUES", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_INTO(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "INTO"));  if (!yymatchString(G, "into")) goto l68;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos69= G->pos, yythunkpos69= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l69;  goto l68;
  l69:;	  G->pos= yypos69; G->thunkpos= yythunkpos69;
  }  yyDo(G, yy_1_INTO, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "INTO", G->buf+G->pos));
  return 1;
  l68:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "INTO", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_INSERT(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "INSERT"));  if (!yymatchString(G, "insert")) goto l70;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos71= G->pos, yythunkpos71= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l71;  goto l70;
  l71:;	  G->pos= yypos71; G->thunkpos= yythunkpos71;
  }  yyDo(G, yy_1_INSERT, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "INSERT", G->buf+G->pos));
  return 1;
  l70:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "INSERT", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_NULLABLE(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "NULLABLE"));
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos73= G->pos, yythunkpos73= G->thunkpos;  if (!yymatchString(G, "not null")) goto l74;  yyDo(G, yy_1_NULLABLE, G->begin, G->end);  goto l73;
  l74:;	  G->pos= yypos73; G->thunkpos= yythunkpos73;  if (!yymatchString(G, "null")) goto l75;  yyDo(G, yy_2_NULLABLE, G->begin, G->end);  goto l73;
  l75:;	  G->pos= yypos73; G->thunkpos= yythunkpos73;  if (!yymatchString(G, "")) goto l72;  yyDo(G, yy_3_NULLABLE, G->begin, G->end);
  }
  l73:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "NULLABLE", G->buf+G->pos));
  return 1;
  l72:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "NULLABLE", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_TYPE(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "TYPE"));
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos77= G->pos, yythunkpos77= G->thunkpos; if (!yy_INTEGER_ID(G)) { goto l78; }
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos79= G->pos, yythunkpos79= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l79;  goto l78;
  l79:;	  G->pos= yypos79; G->thunkpos= yythunkpos79;
  }  yyDo(G, yy_1_TYPE, G->begin, G->end);  goto l77;
  l78:;	  G->pos= yypos77; G->thunkpos= yythunkpos77; if (!yy_FLOAT_ID(G)) { goto l80; }
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos81= G->pos, yythunkpos81= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l81;  goto l80;
  l81:;	  G->pos= yypos81; G->thunkpos= yythunkpos81;
  }  yyDo(G, yy_2_TYPE, G->begin, G->end);  goto l77;
  l80:;	  G->pos= yypos77; G->thunkpos= yythunkpos77; if (!yy_CHARACTER_ID(G)) { goto l82; } if (!yy_OPEN(G)) { goto l82; } if (!yy__(G)) { goto l82; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_INTEGER(G)) { goto l82; }  yyDo(G, yySet, -1, 0); if (!yy__(G)) { goto l82; } if (!yy_CLOSE(G)) { goto l82; }
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos83= G->pos, yythunkpos83= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l83;  goto l82;
  l83:;	  G->pos= yypos83; G->thunkpos= yythunkpos83;
  }  yyDo(G, yy_3_TYPE, G->begin, G->end);  goto l77;
  l82:;	  G->pos= yypos77; G->thunkpos= yythunkpos77; if (!yy_CHARACTER_ID(G)) { goto l76; }
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos84= G->pos, yythunkpos84= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l84;  goto l76;
  l84:;	  G->pos= yypos84; G->thunkpos= yythunkpos84;
  }  yyDo(G, yy_4_TYPE, G->begin, G->end);
  }
  l77:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "TYPE", G->buf+G->pos));  yyDo(G, yyPop, 1, 0);
  return 1;
  l76:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TYPE", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_CLOSE(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "CLOSE"));  if (!yymatchChar(G, ')')) goto l85;  yyDo(G, yy_1_CLOSE, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CLOSE", G->buf+G->pos));
  return 1;
  l85:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CLOSE", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Attribute(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Attribute")); yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -3, 0); if (!yy_ID(G)) { goto l86; }  yyDo(G, yySet, -3, 0); if (!yy__(G)) { goto l86; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_TYPE(G)) { goto l86; }  yyDo(G, yySet, -2, 0); if (!yy__(G)) { goto l86; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_NULLABLE(G)) { goto l86; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_1_Attribute, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Attribute", G->buf+G->pos));  yyDo(G, yyPop, 3, 0);
  return 1;
  l86:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Attribute", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_OPEN(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "OPEN"));  if (!yymatchChar(G, '(')) goto l87;  yyDo(G, yy_1_OPEN, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OPEN", G->buf+G->pos));
  return 1;
  l87:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OPEN", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Layout(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Layout")); if (!yy_OPEN(G)) { goto l88; } if (!yy__(G)) { goto l88; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_Attribute(G)) { goto l88; }  yyDo(G, yySet, -2, 0);  yyDo(G, yy_1_Layout, G->begin, G->end);
  l89:;	
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos90= G->pos, yythunkpos90= G->thunkpos; if (!yy__(G)) { goto l90; } if (!yy_COMMA(G)) { goto l90; } if (!yy__(G)) { goto l90; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_Attribute(G)) { goto l90; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_2_Layout, G->begin, G->end);  goto l89;
  l90:;	  G->pos= yypos90; G->thunkpos= yythunkpos90;
  } if (!yy_CLOSE(G)) { goto l88; }  yyDo(G, yy_3_Layout, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Layout", G->buf+G->pos));  yyDo(G, yyPop, 2, 0);
  return 1;
  l88:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Layout", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_TABLE(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "TABLE"));  if (!yymatchString(G, "table")) goto l91;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos92= G->pos, yythunkpos92= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l92;  goto l91;
  l92:;	  G->pos= yypos92; G->thunkpos= yythunkpos92;
  }  yyDo(G, yy_1_TABLE, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "TABLE", G->buf+G->pos));
  return 1;
  l91:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TABLE", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_CREATE(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "CREATE"));  if (!yymatchString(G, "create")) goto l93;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos94= G->pos, yythunkpos94= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l94;  goto l93;
  l94:;	  G->pos= yypos94; G->thunkpos= yythunkpos94;
  }  yyDo(G, yy_1_CREATE, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CREATE", G->buf+G->pos));
  return 1;
  l93:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CREATE", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Bool(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 4, 0);
  yyprintf((stderr, "%s\n", "Bool"));
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos96= G->pos, yythunkpos96= G->thunkpos; yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -4, 0); if (!yy_TRUE(G)) { goto l97; }  yyDo(G, yySet, -4, 0);  yyDo(G, yy_1_Bool, G->begin, G->end);  goto l96;
  l97:;	  G->pos= yypos96; G->thunkpos= yythunkpos96; yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -3, 0); if (!yy_FALSE(G)) { goto l98; }  yyDo(G, yySet, -3, 0);  yyDo(G, yy_2_Bool, G->begin, G->end);  goto l96;
  l98:;	  G->pos= yypos96; G->thunkpos= yythunkpos96; yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_Sum(G)) { goto l95; }  yyDo(G, yySet, -2, 0);  yyDo(G, yy_3_Bool, G->begin, G->end); if (!yy__(G)) { goto l95; } if (!yy_EQ(G)) { goto l95; } if (!yy__(G)) { goto l95; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_Sum(G)) { goto l95; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_4_Bool, G->begin, G->end);
  l99:;	
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos100= G->pos, yythunkpos100= G->thunkpos; if (!yy__(G)) { goto l100; } if (!yy_EQ(G)) { goto l100; } if (!yy__(G)) { goto l100; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_Sum(G)) { goto l100; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_4_Bool, G->begin, G->end);  goto l99;
  l100:;	  G->pos= yypos100; G->thunkpos= yythunkpos100;
  }  yyDo(G, yy_5_Bool, G->begin, G->end);
  }
  l96:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Bool", G->buf+G->pos));  yyDo(G, yyPop, 4, 0);
  return 1;
  l95:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Bool", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_AND(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "AND"));  if (!yymatchString(G, "and")) goto l101;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos102= G->pos, yythunkpos102= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l102;  goto l101;
  l102:;	  G->pos= yypos102; G->thunkpos= yythunkpos102;
  }  yyDo(G, yy_1_AND, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "AND", G->buf+G->pos));
  return 1;
  l101:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "AND", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Predicate(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "Predicate")); yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_Bool(G)) { goto l103; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_1_Predicate, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Predicate", G->buf+G->pos));  yyDo(G, yyPop, 1, 0);
  return 1;
  l103:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Predicate", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_TableName(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "TableName"));
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos105= G->pos, yythunkpos105= G->thunkpos; yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_ID(G)) { goto l106; }  yyDo(G, yySet, -2, 0);  if (!yymatchChar(G, ' ')) goto l106; yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_ID(G)) { goto l106; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_1_TableName, G->begin, G->end);  goto l105;
  l106:;	  G->pos= yypos105; G->thunkpos= yythunkpos105; yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_ID(G)) { goto l104; }  yyDo(G, yySet, -2, 0);  yyDo(G, yy_2_TableName, G->begin, G->end);
  }
  l105:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "TableName", G->buf+G->pos));  yyDo(G, yyPop, 2, 0);
  return 1;
  l104:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TableName", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_POINT(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "POINT"));  if (!yymatchChar(G, '.')) goto l107;  yyDo(G, yy_1_POINT, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "POINT", G->buf+G->pos));
  return 1;
  l107:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "POINT", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_ID(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "ID"));
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos109= G->pos, yythunkpos109= G->thunkpos; if (!yy_KEYWORDS(G)) { goto l109; }  goto l108;
  l109:;	  G->pos= yypos109; G->thunkpos= yythunkpos109;
  }  yyText(G, G->begin, G->end);  if (!(YY_BEGIN)) goto l108;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l108;
  l110:;	
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos111= G->pos, yythunkpos111= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\377\003\376\377\377\207\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l111;  goto l110;
  l111:;	  G->pos= yypos111; G->thunkpos= yythunkpos111;
  }  yyText(G, G->begin, G->end);  if (!(YY_END)) goto l108;  yyDo(G, yy_1_ID, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "ID", G->buf+G->pos));
  return 1;
  l108:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ID", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_COMMA(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "COMMA"));  if (!yymatchChar(G, ',')) goto l112;  yyDo(G, yy_1_COMMA, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "COMMA", G->buf+G->pos));
  return 1;
  l112:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "COMMA", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_ColumnReference(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "ColumnReference"));
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos114= G->pos, yythunkpos114= G->thunkpos; yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_ID(G)) { goto l115; }  yyDo(G, yySet, -2, 0); if (!yy_POINT(G)) { goto l115; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_ID(G)) { goto l115; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_1_ColumnReference, G->begin, G->end);  goto l114;
  l115:;	  G->pos= yypos114; G->thunkpos= yythunkpos114; yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_ID(G)) { goto l113; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_2_ColumnReference, G->begin, G->end);
  }
  l114:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "ColumnReference", G->buf+G->pos));  yyDo(G, yyPop, 2, 0);
  return 1;
  l113:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ColumnReference", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_SEM(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "SEM"));  if (!yymatchChar(G, ';')) goto l116;  yyDo(G, yy_1_SEM, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "SEM", G->buf+G->pos));
  return 1;
  l116:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SEM", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Predicates(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Predicates")); yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_Predicate(G)) { goto l117; }  yyDo(G, yySet, -2, 0);  yyDo(G, yy_1_Predicates, G->begin, G->end);
  l118:;	
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos119= G->pos, yythunkpos119= G->thunkpos; if (!yy__(G)) { goto l119; } if (!yy_AND(G)) { goto l119; } if (!yy__(G)) { goto l119; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_Predicate(G)) { goto l119; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_2_Predicates, G->begin, G->end);  goto l118;
  l119:;	  G->pos= yypos119; G->thunkpos= yythunkpos119;
  }  yyDo(G, yy_3_Predicates, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Predicates", G->buf+G->pos));  yyDo(G, yyPop, 2, 0);
  return 1;
  l117:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Predicates", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_WHERE(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "WHERE"));  if (!yymatchString(G, "where")) goto l120;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos121= G->pos, yythunkpos121= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l121;  goto l120;
  l121:;	  G->pos= yypos121; G->thunkpos= yythunkpos121;
  }  yyDo(G, yy_1_WHERE, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "WHERE", G->buf+G->pos));
  return 1;
  l120:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "WHERE", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Tables(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Tables")); yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_TableName(G)) { goto l122; }  yyDo(G, yySet, -2, 0);  yyDo(G, yy_1_Tables, G->begin, G->end);
  l123:;	
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos124= G->pos, yythunkpos124= G->thunkpos; if (!yy__(G)) { goto l124; } if (!yy_COMMA(G)) { goto l124; } if (!yy__(G)) { goto l124; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_TableName(G)) { goto l124; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_2_Tables, G->begin, G->end);  goto l123;
  l124:;	  G->pos= yypos124; G->thunkpos= yythunkpos124;
  }  yyDo(G, yy_3_Tables, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Tables", G->buf+G->pos));  yyDo(G, yyPop, 2, 0);
  return 1;
  l122:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Tables", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_FROM(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "FROM"));  if (!yymatchString(G, "from")) goto l125;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos126= G->pos, yythunkpos126= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l126;  goto l125;
  l126:;	  G->pos= yypos126; G->thunkpos= yythunkpos126;
  }  yyDo(G, yy_1_FROM, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "FROM", G->buf+G->pos));
  return 1;
  l125:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FROM", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_Projection(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Projection")); yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_ColumnReference(G)) { goto l127; }  yyDo(G, yySet, -2, 0);  yyDo(G, yy_1_Projection, G->begin, G->end);
  l128:;	
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos129= G->pos, yythunkpos129= G->thunkpos; if (!yy__(G)) { goto l129; } if (!yy_COMMA(G)) { goto l129; } if (!yy__(G)) { goto l129; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_ColumnReference(G)) { goto l129; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_2_Projection, G->begin, G->end);  goto l128;
  l129:;	  G->pos= yypos129; G->thunkpos= yythunkpos129;
  }  yyDo(G, yy_3_Projection, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Projection", G->buf+G->pos));  yyDo(G, yyPop, 2, 0);
  return 1;
  l127:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Projection", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_SELECT(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "SELECT"));  if (!yymatchString(G, "select")) goto l130;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos131= G->pos, yythunkpos131= G->thunkpos;  if (!yymatchClass(G, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\376\377\377\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l131;  goto l130;
  l131:;	  G->pos= yypos131; G->thunkpos= yythunkpos131;
  }  yyDo(G, yy_1_SELECT, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "SELECT", G->buf+G->pos));
  return 1;
  l130:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SELECT", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_InsertStatement(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "InsertStatement")); if (!yy_INSERT(G)) { goto l132; } if (!yy__(G)) { goto l132; } if (!yy_INTO(G)) { goto l132; } if (!yy__(G)) { goto l132; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_ID(G)) { goto l132; }  yyDo(G, yySet, -2, 0); if (!yy__(G)) { goto l132; } if (!yy_VALUES(G)) { goto l132; } if (!yy__(G)) { goto l132; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_Values(G)) { goto l132; }  yyDo(G, yySet, -1, 0); if (!yy__(G)) { goto l132; } if (!yy_SEM(G)) { goto l132; }  yyDo(G, yy_1_InsertStatement, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "InsertStatement", G->buf+G->pos));  yyDo(G, yyPop, 2, 0);
  return 1;
  l132:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "InsertStatement", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_CreateTableStatement(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "CreateTableStatement")); if (!yy_CREATE(G)) { goto l133; } if (!yy__(G)) { goto l133; } if (!yy_TABLE(G)) { goto l133; } if (!yy__(G)) { goto l133; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_ID(G)) { goto l133; }  yyDo(G, yySet, -2, 0); if (!yy__(G)) { goto l133; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_Layout(G)) { goto l133; }  yyDo(G, yySet, -1, 0); if (!yy__(G)) { goto l133; } if (!yy_SEM(G)) { goto l133; }  yyDo(G, yy_1_CreateTableStatement, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "CreateTableStatement", G->buf+G->pos));  yyDo(G, yyPop, 2, 0);
  return 1;
  l133:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CreateTableStatement", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_SelectStatement(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "SelectStatement"));
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos135= G->pos, yythunkpos135= G->thunkpos; if (!yy_SELECT(G)) { goto l136; } if (!yy__(G)) { goto l136; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -3, 0); if (!yy_Projection(G)) { goto l136; }  yyDo(G, yySet, -3, 0); if (!yy__(G)) { goto l136; } if (!yy_FROM(G)) { goto l136; } if (!yy__(G)) { goto l136; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_Tables(G)) { goto l136; }  yyDo(G, yySet, -2, 0); if (!yy__(G)) { goto l136; } if (!yy_WHERE(G)) { goto l136; } if (!yy__(G)) { goto l136; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_Predicates(G)) { goto l136; }  yyDo(G, yySet, -1, 0); if (!yy__(G)) { goto l136; } if (!yy_SEM(G)) { goto l136; }  yyDo(G, yy_1_SelectStatement, G->begin, G->end);  goto l135;
  l136:;	  G->pos= yypos135; G->thunkpos= yythunkpos135; if (!yy_SELECT(G)) { goto l134; } if (!yy__(G)) { goto l134; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -3, 0); if (!yy_Projection(G)) { goto l134; }  yyDo(G, yySet, -3, 0); if (!yy__(G)) { goto l134; } if (!yy_FROM(G)) { goto l134; } if (!yy__(G)) { goto l134; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_Tables(G)) { goto l134; }  yyDo(G, yySet, -2, 0); if (!yy__(G)) { goto l134; } if (!yy_SEM(G)) { goto l134; }  yyDo(G, yy_2_SelectStatement, G->begin, G->end);
  }
  l135:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "SelectStatement", G->buf+G->pos));  yyDo(G, yyPop, 3, 0);
  return 1;
  l134:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SelectStatement", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_GlobalSingle(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "GlobalSingle"));
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos138= G->pos, yythunkpos138= G->thunkpos; if (!yy__(G)) { goto l139; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -3, 0); if (!yy_SelectStatement(G)) { goto l139; }  yyDo(G, yySet, -3, 0);  yyDo(G, yy_1_GlobalSingle, G->begin, G->end);  goto l138;
  l139:;	  G->pos= yypos138; G->thunkpos= yythunkpos138; if (!yy__(G)) { goto l140; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_CreateTableStatement(G)) { goto l140; }  yyDo(G, yySet, -2, 0);  yyDo(G, yy_2_GlobalSingle, G->begin, G->end);  goto l138;
  l140:;	  G->pos= yypos138; G->thunkpos= yythunkpos138; if (!yy__(G)) { goto l137; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_InsertStatement(G)) { goto l137; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_3_GlobalSingle, G->begin, G->end);
  }
  l138:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "GlobalSingle", G->buf+G->pos));  yyDo(G, yyPop, 3, 0);
  return 1;
  l137:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "GlobalSingle", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy__(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;
  yyprintf((stderr, "%s\n", "_"));
  l142:;	
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos143= G->pos, yythunkpos143= G->thunkpos;
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos144= G->pos, yythunkpos144= G->thunkpos;  if (!yymatchChar(G, ' ')) goto l145;  goto l144;
  l145:;	  G->pos= yypos144; G->thunkpos= yythunkpos144;  if (!yymatchChar(G, '\n')) goto l146;  goto l144;
  l146:;	  G->pos= yypos144; G->thunkpos= yythunkpos144;  if (!yymatchChar(G, '\t')) goto l143;
  }
  l144:;	  goto l142;
  l143:;	  G->pos= yypos143; G->thunkpos= yythunkpos143;
  }  yyDo(G, yy_1__, G->begin, G->end);
  yyprintf((stderr, "  ok   %s @ %s\n", "_", G->buf+G->pos));
  return 1;
  l141:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "_", G->buf+G->pos));
  return 0;
}
YY_RULE(int) yy_start(GREG *G)
{  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos0= G->pos, yythunkpos0= G->thunkpos;  yyDo(G, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "start"));
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos148= G->pos, yythunkpos148= G->thunkpos; if (!yy__(G)) { goto l149; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -2, 0); if (!yy_GlobalSingle(G)) { goto l149; }  yyDo(G, yySet, -2, 0);  yyDo(G, yy_1_start, G->begin, G->end);
  l150:;	
  {  G->maxPos=G->maxPos>G->pos?G->maxPos:G->pos; int yypos151= G->pos, yythunkpos151= G->thunkpos; if (!yy__(G)) { goto l151; } yyDo(G,yyResetSS,0,0);   yyDo(G, yySet, -1, 0); if (!yy_GlobalSingle(G)) { goto l151; }  yyDo(G, yySet, -1, 0);  yyDo(G, yy_2_start, G->begin, G->end);  goto l150;
  l151:;	  G->pos= yypos151; G->thunkpos= yythunkpos151;
  } if (!yy__(G)) { goto l149; }  yyDo(G, yy_3_start, G->begin, G->end);  goto l148;
  l149:;	  G->pos= yypos148; G->thunkpos= yythunkpos148;  yyText(G, G->begin, G->end);  if (!(YY_BEGIN)) goto l147;  if (!yymatchDot(G)) goto l147;  yyText(G, G->begin, G->end);  if (!(YY_END)) goto l147;  yyDo(G, yy_4_start, G->begin, G->end);
  }
  l148:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "start", G->buf+G->pos));  yyDo(G, yyPop, 2, 0);
  return 1;
  l147:;	  G->pos= yypos0; G->thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "start", G->buf+G->pos));
  return 0;
}

#ifndef YY_PART

typedef int (*yyrule)(GREG *G);

YY_PARSE(int) YY_NAME(parse_from)(GREG *G, yyrule yystart)
{
  int yyok;
  if (!G->buflen)
    {
      G->buflen= YY_BUFFER_START_SIZE;
      G->buf= (char*)YY_ALLOC(G->buflen, G->data);
      G->textlen= YY_BUFFER_START_SIZE;
      G->text= (char*)YY_ALLOC(G->textlen, G->data);
      G->thunkslen= YY_STACK_SIZE;
      G->thunks= (yythunk*)YY_ALLOC(sizeof(yythunk) * G->thunkslen, G->data);
      G->valslen= YY_STACK_SIZE;
      G->vals= (YYSTYPE*)YY_ALLOC(sizeof(YYSTYPE) * G->valslen, G->data);
      G->begin= G->end= G->pos= G->limit= G->thunkpos= 0;
    }
  G->pos = 0;
  G->begin= G->end= G->pos;
  G->thunkpos= 0;
  G->val= G->vals;
  yyok= yystart(G);
  if (yyok) yyDone(G);
  yyCommit(G);
  return yyok;
  (void)yyrefill;
  (void)yymatchDot;
  (void)yymatchChar;
  (void)yymatchString;
  (void)yymatchClass;
  (void)yyDo;
  (void)yyText;
  (void)yyDone;
  (void)yyCommit;
  (void)yyAccept;
  (void)yyPush;
  (void)yyPop;
  (void)yySet;
}

YY_PARSE(int) YY_NAME(parse)(GREG *G)
{
  return YY_NAME(parse_from)(G, yy_start);
}

YY_PARSE(void) YY_NAME(init)(GREG *G)
{
    //memset(G, 0, sizeof(GREG));
}
YY_PARSE(void) YY_NAME(deinit)(GREG *G)
{
    if (G->buf) YY_FREE(G->buf);
    if (G->text) YY_FREE(G->text);
    if (G->thunks) YY_FREE(G->thunks);
    if (G->vals) YY_FREE(G->vals);
}
YY_PARSE(GREG *) YY_NAME(parse_new)(YY_XTYPE data)
{
  GREG *G = (GREG *)YY_CALLOC(1, sizeof(GREG), G->data);
  G->data = data;
  return G;
}

YY_PARSE(void) YY_NAME(parse_free)(GREG *G)
{
  YY_NAME(deinit)(G);
  YY_FREE(G);
}

#endif

#pragma GCC diagnostic warning "-Wunused-parameter"
#pragma GCC diagnostic warning "-Wunused-label"
#pragma GCC diagnostic warning "-Wunused-function"



namespace dbi {

namespace script {

namespace {
mutex parserGuard; // Sorry only one parsing at a time ..
}

unique_ptr<RootStatement> parse(const string& query) throw(ParserException)
{
  unique_lock<mutex> l(parserGuard);

  input.clear();
  input.str(query);

  try {
    GREG g;
    yyinit(&g);
    while (yyparse(&g));
    yydeinit(&g);
  } catch (int) {
    throw ParserException("parser error: ", lineNumber, columnNumber);
  }

  return move(result);
}

}

}


