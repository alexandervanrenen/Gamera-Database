// Generated by CoffeeScript 1.4.0
(function() {
  var server;

  server = "http://localhost:4567";

  window.GameraModel = function() {
    var self;
    self = this;
    this.editor = ace.edit("editor");
    this.g_result = ko.observable("gamera results");
    this.s_result = ko.observable("sqlite results");
    this.g_resultRows = ko.observableArray([]);
    this.s_resultRows = ko.observableArray([]);
    this.isLoading = ko.observable(false);
    this.logState = ko.observable(false);
    this.column = ko.observable(0);
    this.line = ko.observable(1);
    this.queryStr = "";
    this.gameraStr = "";
    this.sqliteStr = "";
    this.sendQueryCompare = function() {
      if (!self.isLoading() && !self.logState()) {
        self.queryStr = "" + self.editor.getSession();
        if ((self.queryStr.match(/;/g) || []).length !== 1) {
          return alert("Use only single statements");
        }
        self.isLoading(true);
        return $.ajax({
          type: 'POST',
          url: server + "/query/compare",
          data: self.queryStr,
          dataType: "text",
          success: function(response) {
            return self.receiveQueryLoggingResult(response);
          }
        });
      }
    };
    this.sendQuery = function() {
      if (!self.isLoading()) {
        self.queryStr = "" + self.editor.getSession();
        self.isLoading(true);
        return $.ajax({
          type: 'POST',
          url: server + "/query/execute",
          data: self.queryStr,
          dataType: "text",
          success: function(response) {
            return self.receiveQueryResult(response);
          }
        });
      }
    };
    this.logGamera = function() {
      var msg;
      if (!self.isLoading() && self.logState()) {
        self.isLoading(true);
        msg = {
          query: "" + self.queryStr,
          expected: self.gameraStr
        };
        return $.ajax({
          type: 'POST',
          url: server + "/query/log",
          data: JSON.stringify(msg),
          dataType: "text",
          success: function(response) {
            return window.setTimeout((function() {
              return self.isLoading(false).logState(false);
            }), 1400);
          }
        });
      }
    };
    this.ignoreResult = function() {
      return self.logState(false);
    };
    this.logSqlite = function() {
      var msg;
      if (!self.isLoading() && self.logState()) {
        self.isLoading(true);
        msg = {
          query: "" + self.queryStr,
          expected: self.sqliteStr
        };
        return $.ajax({
          type: 'POST',
          url: server + "/query/log",
          data: JSON.stringify(msg),
          dataType: "text",
          success: function(response) {
            return window.setTimeout((function() {
              return self.isLoading(false).logState(false);
            }), 1400);
          }
        });
      }
    };
    this.receiveQueryResult = function(response) {
      var data, lastResult;
      window.setTimeout((function() {
        return self.isLoading(false).logState(true);
      }), 1400);
      self.g_resultRows([[]]).s_resultRows([[]]);
      if (!((response != null) || response !== "")) {
        return self.g_result("no response").s_result("no response");
      }
      data = JSON.parse(response);
      if ((data.error != null) && data.error !== "") {
        return self.g_result("error: " + data.error);
      }
      if (!(data.results.length != null) || data.results.length === 0) {
        return self.g_result("error: no statement was executed");
      }
      if (data.results.length > 1) {
        return self.g_result("Executed " + data.results.length + " statements.");
      }
      lastResult = data.results[data.results.length - 1];
      switch (lastResult.type) {
        case "create":
          return self.g_result("Created table '" + lastResult.table + "' in " + lastResult.time + ".");
        case "insert":
          return self.g_result("Inserted one tuple into table '" + lastResult.table + "' in " + lastResult.time + ".");
        case "select":
          self.g_result("Fetched " + lastResult.content.length + " tuple(s) in " + lastResult.time);
          return self.g_resultRows([lastResult.layout].concat(lastResult.content));
        default:
          return self.result("Error unknown result type '" + lastResult.type + "'");
      }
    };
    this.receiveQueryLoggingResult = function(response) {
      var data, doGamera, doSqlite;
      window.setTimeout((function() {
        return self.isLoading(false).logState(true);
      }), 1400);
      self.g_resultRows([[]]).s_resultRows([[]]);
      if (!((response != null) || response !== "")) {
        return self.g_result("no response").s_result("no response");
      }
      data = JSON.parse(response);
      doGamera = function(data) {
        var d, header, i, _i, _len, _ref;
        self.gameraStr = JSON.stringify(data);
        if ((data.error != null) && data.error !== "") {
          return self.g_result("error: " + data.error);
        }
        self.g_result("Success.");
        if (data.content.length !== 0) {
          header = [];
          _ref = data.content[0];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            d = _ref[i];
            header = header.concat(["?"]);
          }
          return self.g_resultRows([header].concat(data.content));
        }
      };
      doGamera(data.gamera);
      doSqlite = function(data) {
        var d, header, i, _i, _len, _ref;
        self.sqliteStr = JSON.stringify(data);
        if ((data.error != null) && data.error !== "") {
          return self.s_result("error: " + data.error);
        }
        self.s_result("Success.");
        if (data.content.length !== 0) {
          header = [];
          _ref = data.content[0];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            d = _ref[i];
            header = header.concat(["?"]);
          }
          return self.s_resultRows([header].concat(data.content));
        }
      };
      return doSqlite(data.sqlite);
    };
    this.initialize = function() {
      self.editor.getSession().selection.on('changeCursor', function(ev) {
        return self.column(self.editor.selection.getCursor().column).line(self.editor.selection.getCursor().row + 1);
      });
      self.editor.setTheme("ace/theme/twilight");
      self.editor.getSession().setMode("ace/mode/mysql");
      self.editor.getSession().setTabSize(3);
      return self.editor.getSession().setUseWrapMode(false);
    };
  };

}).call(this);
